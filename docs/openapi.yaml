openapi: "3.1.0"

info:
  title: Gnosis - Deepgram AI Support Agent
  description: |
    Gnosis provides secure, managed access to Deepgram's AI Support Agent and knowledge services. 
    It serves as a unified gateway for both internal and external clients with:

    - Secure authentication and authorization
    - Request routing and rate limiting
    - Response formatting and validation
    - Tool integration (Algolia, GitHub, Kapa)
  termsOfService: https://deepgram.com/terms/
  contact:
    name: Deepgram DevRel Team
    email: devrel@deepgram.com
    url: https://community.deepgram.com/
  license:
    name: LicenseRef-Proprietary-Deepgram
    url: https://deepgram.com/terms/
  version: 1.0.0

servers:
  - url: https://gnosis.deepgram.com/v1
    description: Production server

tags:
  - name: Auth
    description: Manage OAuth authentication and session tokens
  - name: Chat
    description: Create chat completions with Deepgram's AI assistant

paths:
  /oauth/widget:
    post:
      summary: Get widget code
      tags:
        - Auth
      security: []
      description: |
        Initiates OAuth widget code flow for client applications.

        Requirements:
        - Valid session cookie
        - Registered client identifier
        - State parameter for CSRF protection

        Returns an widget code for subsequent token exchange.
      parameters:
        - in: cookie
          name: gnosis_session
          required: true
          schema:
            type: string
          description: Active session cookie containing a valid JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - client_id
                - state
              properties:
                client_id:
                  type: string
                  description: Registered client identifier for the application
                state:
                  type: string
                  description: Random string to prevent CSRF attacks
      responses:
        "200":
          description: |
            Widget code generated successfully.
            Use this code to request an access token via /oauth/token endpoint.
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - state
                properties:
                  code:
                    type: string
                    description: One-time widget code valid for 10 minutes
                  state:
                    type: string
                    description: Original state value from the request
        "400":
          description: Invalid request parameters or missing required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid session cookie or unregistered client ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /oauth/token:
    post:
      summary: Get access token
      tags:
        - Auth
      security: []
      description: |
        Exchange credentials for an access token using one of two grant types:

        1. Client Credentials: Direct server-to-server access using client_id and client_secret
        2. Widget Code: Custom grant for widget-based user authorization

        Returns a Bearer token valid for 15 minutes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - title: Client Credentials Grant
                  description: Server-to-server authentication using client credentials
                  type: object
                  required:
                    - grant_type
                    - client_id
                    - client_secret
                  properties:
                    grant_type:
                      type: string
                      enum: [client_credentials]
                      description: Must be "client_credentials" for this grant type
                    client_id:
                      type: string
                      description: Registered client identifier
                    client_secret:
                      type: string
                      description: Secret key for the client application
                - title: Widget Code Grant
                  description: User-authorized authentication using widget code
                  type: object
                  required:
                    - grant_type
                    - client_id
                    - code
                  properties:
                    grant_type:
                      type: string
                      enum: [widget]
                      description: Must be "widget" for this grant type
                    client_id:
                      type: string
                      description: Registered client identifier
                    code:
                      type: string
                      description: Widget code from /oauth/widget
      responses:
        "200":
          description: |
            Access token generated successfully.
            Use this token in the Authorization header for subsequent API calls.
          content:
            application/json:
              schema:
                type: object
                required:
                  - access_token
                  - token_type
                  - expires_in
                properties:
                  access_token:
                    type: string
                    description: JWT token for API authentication
                  token_type:
                    type: string
                    enum: [Bearer]
                    description: Token type for Authorization header
                  expires_in:
                    type: integer
                    description: Token lifetime in seconds (900 = 15 minutes)
        "400":
          description: Invalid grant type or missing required parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid client credentials or expired widget code
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /chat/completions:
    post:
      summary: Create chat completion
      tags:
        - Chat
      description: |
        Generate an AI response based on conversation history.

        Features:
        - Context-aware responses using message history
        - Optional system prompts for behaviour control
        - Automatic tool selection for enhanced responses
        - Support for multiple languages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatCompletionRequest"
      responses:
        "200":
          description: |
            Chat completion generated successfully.
            Includes token usage statistics and unique completion ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatCompletionResponse"
        "400":
          description: Invalid message format or configuration parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Missing or invalid access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "429":
          description: Too many requests - Exceeded rate limit
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: |
            Standard OAuth 2.0 error code identifying the issue:
            - invalid_request: Malformed request syntax
            - invalid_client: Unknown or invalid client credentials
            - invalid_grant: Invalid grant type or expired widget code
            - unauthorized_client: Client not allowed to use grant type
            - unsupported_grant_type: Grant type not supported
            - invalid_scope: Requested scope is invalid
            - access_denied: Server refused to grant access
            - server_error: Internal server error
            - temporarily_unavailable: Service temporarily offline
          enum:
            - invalid_request
            - invalid_client
            - invalid_grant
            - unauthorized_client
            - unsupported_grant_type
            - invalid_scope
            - access_denied
            - unsupported_response_type
            - server_error
            - temporarily_unavailable
        error_description:
          type: string
          description: Human-readable explanation of the error
        error_uri:
          type: string
          format: uri
          description: Link to documentation about this error

    ChatCompletionRequest:
      type: object
      required:
        - messages
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/ChatMessage"
          minItems: 1
          description: Ordered list of messages in the conversation
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 1
          description: Controls randomness in responses (0 = focused, 2 = creative)
        max_tokens:
          type: integer
          minimum: 1
          maximum: 4096
          default: 1024
          description: Maximum number of tokens to generate
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          description: Controls diversity via nucleus sampling
        presence_penalty:
          type: number
          minimum: -2
          maximum: 2
          default: 0
          description: Penalizes new tokens based on presence in text
        frequency_penalty:
          type: number
          minimum: -2
          maximum: 2
          default: 0
          description: Penalizes new tokens based on frequency in text

    ChatCompletionResponse:
      type: object
      required:
        - id
        - created
        - choices
        - usage
      properties:
        id:
          type: string
          description: Unique identifier for this completion
        created:
          type: integer
          description: Unix timestamp of response creation
        choices:
          type: array
          items:
            type: object
            required:
              - message
            properties:
              message:
                $ref: "#/components/schemas/ChatMessage"
          description: List of generated completions (currently always size 1)
        usage:
          type: object
          required:
            - prompt_tokens
            - completion_tokens
            - total_tokens
          properties:
            prompt_tokens:
              type: integer
              description: Number of tokens in the prompt
            completion_tokens:
              type: integer
              description: Number of tokens in the completion
            total_tokens:
              type: integer
              description: Total tokens used (prompt + completion)

    ChatMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum: [user, assistant, system]
          description: |
            Role of the message sender:
            - user: End user messages
            - assistant: AI responses
            - system: Behaviour control prompts
        content:
          type: string
          description: The actual message content
      additionalProperties: false

  securitySchemes:
    client_credentials:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: /v1/oauth/token
          scopes: {}
    widget:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /v1/oauth/widget
          tokenUrl: /v1/oauth/token
          scopes: {}

security:
  - client_credentials: []
  - widget: []