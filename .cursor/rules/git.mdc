---
description: This rule should be used whenever the agent goes to commit changes.
globs: 
alwaysApply: false
---
## Specification

The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119.

1. Commits MUST be prefixed with a type, which consists of a noun, `feat`, `fix`, etc., followed
  by an OPTIONAL scope, and a REQUIRED terminal colon and space.
1. The type `feat` MUST be used when a commit adds a new feature to your application or library.
1. The type `fix` MUST be used when a commit represents a bug fix for your application.
1. A scope MAY be provided after a type. A scope MUST consist of a noun describing a
  section of the codebase surrounded by parenthesis, e.g., `fix(parser):`
1. A description MUST immediately follow the space after the type/scope prefix.
The description is a short summary of the code changes, e.g., _fix: array parsing issue when multiple spaces were contained in string._
1. A longer commit body MAY be provided after the short description, providing additional contextual information about the code changes. The body MUST begin one blank line after the description.
1. A footer of one or more lines MAY be provided one blank line after the body. The footer MUST contain meta-information
about the commit, e.g., related pull-requests, reviewers, breaking changes, with one piece of meta-information
per-line.
1. Breaking changes MUST be indicated at the very beginning of the body section, or at the beginning of a line in the footer section. A breaking change MUST consist of the uppercase text BREAKING CHANGE, followed by a colon and a space.
1. A description MUST be provided after the `BREAKING CHANGE: `, describing what has changed about the API, e.g., _BREAKING CHANGE: environment variables now take precedence over config files._
1. Types other than `feat` and `fix` MAY be used in your commit messages.
1. The units of information that make up conventional commits MUST NOT be treated as case sensitive by implementors, with the exception of BREAKING CHANGE which MUST be uppercase.
1. A `!` MAY be appended prior to the `:` in the type/scope prefix, to further draw attention to breaking changes. `BREAKING CHANGE: description` MUST also be included in the body
or footer, along with the `!` in the prefix.

## Commit examples

1. ALWAYS use a temporary file like `/tmp/commit-msg.txt` to achieve a properly formatted commit message.
2. Smallest acceptable example, for single line fixes.

    ```bash
    cat <<EOF > /tmp/commit-msg.txt
    fix(api): avoid crash on empty payload

    References:
    - requirements.txt (line 14)

    Fixes: 401s on internal cronjobs calling /metrics
    EOF

    git commit -F /tmp/commit-msg.txt
    ```

3. Minimal but structured.

    ```bash
    cat <<EOF > /tmp/commit-msg.txt
    chore(deps): update websocket lib to 2.1.3

    - Bumped ws-lib from 2.1.1 to 2.1.3
    - Minor performance improvements

    References:
    - requirements.txt (line 14)

    Fixes: 401s on internal cronjobs calling /metrics
    EOF

    git commit -F /tmp/commit-msg.txt
    ```

4. Mid-size with Fixes.

    ```bash
    cat <<EOF > /tmp/commit-msg.txt
    feat(auth): support API keys for internal tools

    - Added API key validation to middleware
    - Skips session validation if valid key is present

    References:
    - app/routes/agent.py (lines 112–144)
    - app/ws/upgrade.py (new file)

    Fixes: 401s on internal cronjobs calling /metrics
    EOF

    git commit -F /tmp/commit-msg.txt
    ```

5. Mid-size with References and Fixes.

    ```bash
    cat <<EOF > /tmp/commit-msg.txt
    refactor(agent): isolate websocket upgrade logic

    - Moved WebSocket upgrade code into separate module
    - Improved separation of concerns between routes and transport logic

    References:
    - app/routes/agent.py (lines 112–144)
    - app/ws/upgrade.py (new file)

    Fixes: issues with reconnects during high load
    EOF

    git commit -F /tmp/commit-msg.txt
    ```

6. Sets the high end of detail, for large changes involving many lines or many files.

    ```bash
    cat <<EOF > /tmp/commit-msg.txt
    refactor(logging): replace custom loggers with print statements

    - Removed all custom logger configuration from main.py and config.py
    - Replaced logger calls (debug, info, warning, error) with print statements
    - Fixed determine_data_type to check if data is a dict before accessing keys
    - Handled None return values in forwarding functions
    - Improved WebSocket message handling for unicorn events
    - Added error handling for unprocessable data

    References:
    - app/routes/agent.py (lines 50–105, 216–270)
    - app/main.py (lines 1–66)
    - app/config.py (lines 1–45)

    Fixes: Deepgram WebSocket agent connection issues
    EOF

    git commit -F /tmp/commit-msg.txt
    ```

